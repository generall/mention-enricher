// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package ml.generall.sentence



/** Context of mention
  *
  * @param size
  *   size of context
  *   Required
  * @param left
  *   left context string
  * @param right
  *   right context string
  *   Next available id: 1
  */
@SerialVersionUID(0L)
final case class Context(
    size: Int,
    left: scala.Option[String] = None,
    right: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Context] with com.trueaccord.lenses.Updatable[Context] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, size)
      if (left.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, left.get) }
      if (right.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, right.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeInt32(1, size)
      left.foreach { __v =>
        _output__.writeString(2, __v)
      };
      right.foreach { __v =>
        _output__.writeString(3, __v)
      };
    }
    def mergeFrom(`_input__`: com.google.protobuf.CodedInputStream): ml.generall.sentence.Context = {
      var __size = this.size
      var __left = this.left
      var __right = this.right
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __size = _input__.readInt32()
          case 18 =>
            __left = Some(_input__.readString())
          case 26 =>
            __right = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      ml.generall.sentence.Context(
          size = __size,
          left = __left,
          right = __right
      )
    }
    def withSize(__v: Int): Context = copy(size = __v)
    def getLeft: String = left.getOrElse("")
    def clearLeft: Context = copy(left = None)
    def withLeft(__v: String): Context = copy(left = Some(__v))
    def getRight: String = right.getOrElse("")
    def clearRight: Context = copy(right = None)
    def withRight(__v: String): Context = copy(right = Some(__v))
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => size
        case 2 => left.getOrElse(null)
        case 3 => right.getOrElse(null)
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = ml.generall.sentence.Context
}

object Context extends com.trueaccord.scalapb.GeneratedMessageCompanion[ml.generall.sentence.Context] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ml.generall.sentence.Context] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): ml.generall.sentence.Context = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    ml.generall.sentence.Context(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = SentenceProto.descriptor.getMessageTypes.get(2)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = ml.generall.sentence.Context(
    size = 0
  )
  implicit class ContextLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ml.generall.sentence.Context]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ml.generall.sentence.Context](_l) {
    def size: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.size)((c_, f_) => c_.copy(size = f_))
    def left: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getLeft)((c_, f_) => c_.copy(left = Some(f_)))
    def optionalLeft: com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.left)((c_, f_) => c_.copy(left = f_))
    def right: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getRight)((c_, f_) => c_.copy(right = Some(f_)))
    def optionalRight: com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.right)((c_, f_) => c_.copy(right = f_))
  }
  final val SIZE_FIELD_NUMBER = 1
  final val LEFT_FIELD_NUMBER = 2
  final val RIGHT_FIELD_NUMBER = 3
}
