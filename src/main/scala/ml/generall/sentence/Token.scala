// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package ml.generall.sentence



/** Token description
  *
  * @param token
  *   Token string
  *   Required
  * @param lemma
  *   Lemma of token
  *   Required
  * @param posTag
  *   Part of speech tag
  *   Required
  * @param parserTag
  *   parser tag
  *   Required
  * @param group
  *   Group id of token
  *   Required
  * @param mentions
  *   Mentions id of this token
  */
@SerialVersionUID(0L)
final case class Token(
    token: scala.Option[String] = None,
    lemma: scala.Option[String] = None,
    posTag: scala.Option[String] = None,
    parserTag: scala.Option[String] = None,
    group: scala.Option[Int] = None,
    mentions: scala.collection.Seq[Int] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Token] with com.trueaccord.lenses.Updatable[Token] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (token.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, token.get) }
      if (lemma.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(2, lemma.get) }
      if (posTag.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, posTag.get) }
      if (parserTag.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(4, parserTag.get) }
      if (group.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(5, group.get) }
      mentions.foreach(mentions => __size += com.google.protobuf.CodedOutputStream.computeInt32Size(6, mentions))
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: com.google.protobuf.CodedOutputStream): Unit = {
      token.foreach { __v =>
        _output__.writeString(1, __v)
      };
      lemma.foreach { __v =>
        _output__.writeString(2, __v)
      };
      posTag.foreach { __v =>
        _output__.writeString(3, __v)
      };
      parserTag.foreach { __v =>
        _output__.writeString(4, __v)
      };
      group.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      mentions.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
    }
    def mergeFrom(`_input__`: com.google.protobuf.CodedInputStream): ml.generall.sentence.Token = {
      var __token = this.token
      var __lemma = this.lemma
      var __posTag = this.posTag
      var __parserTag = this.parserTag
      var __group = this.group
      val __mentions = (scala.collection.immutable.Vector.newBuilder[Int] ++= this.mentions)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __token = Some(_input__.readString())
          case 18 =>
            __lemma = Some(_input__.readString())
          case 26 =>
            __posTag = Some(_input__.readString())
          case 34 =>
            __parserTag = Some(_input__.readString())
          case 40 =>
            __group = Some(_input__.readInt32())
          case 48 =>
            __mentions += _input__.readInt32()
          case 50 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __mentions += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case tag => _input__.skipField(tag)
        }
      }
      ml.generall.sentence.Token(
          token = __token,
          lemma = __lemma,
          posTag = __posTag,
          parserTag = __parserTag,
          group = __group,
          mentions = __mentions.result()
      )
    }
    def getToken: String = token.getOrElse("")
    def clearToken: Token = copy(token = None)
    def withToken(__v: String): Token = copy(token = Some(__v))
    def getLemma: String = lemma.getOrElse("")
    def clearLemma: Token = copy(lemma = None)
    def withLemma(__v: String): Token = copy(lemma = Some(__v))
    def getPosTag: String = posTag.getOrElse("")
    def clearPosTag: Token = copy(posTag = None)
    def withPosTag(__v: String): Token = copy(posTag = Some(__v))
    def getParserTag: String = parserTag.getOrElse("")
    def clearParserTag: Token = copy(parserTag = None)
    def withParserTag(__v: String): Token = copy(parserTag = Some(__v))
    def getGroup: Int = group.getOrElse(0)
    def clearGroup: Token = copy(group = None)
    def withGroup(__v: Int): Token = copy(group = Some(__v))
    def clearMentions = copy(mentions = scala.collection.Seq.empty)
    def addMentions(__vs: Int*): Token = addAllMentions(__vs)
    def addAllMentions(__vs: TraversableOnce[Int]): Token = copy(mentions = mentions ++ __vs)
    def withMentions(__v: scala.collection.Seq[Int]): Token = copy(mentions = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => token.getOrElse(null)
        case 2 => lemma.getOrElse(null)
        case 3 => posTag.getOrElse(null)
        case 4 => parserTag.getOrElse(null)
        case 5 => group.getOrElse(null)
        case 6 => mentions
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = ml.generall.sentence.Token
}

object Token extends com.trueaccord.scalapb.GeneratedMessageCompanion[ml.generall.sentence.Token] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[ml.generall.sentence.Token] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): ml.generall.sentence.Token = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    ml.generall.sentence.Token(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[scala.collection.Seq[Int]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = SentenceProto.descriptor.getMessageTypes.get(5)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = ml.generall.sentence.Token(
  )
  implicit class TokenLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, ml.generall.sentence.Token]) extends com.trueaccord.lenses.ObjectLens[UpperPB, ml.generall.sentence.Token](_l) {
    def token: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getToken)((c_, f_) => c_.copy(token = Some(f_)))
    def optionalToken: com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.token)((c_, f_) => c_.copy(token = f_))
    def lemma: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getLemma)((c_, f_) => c_.copy(lemma = Some(f_)))
    def optionalLemma: com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.lemma)((c_, f_) => c_.copy(lemma = f_))
    def posTag: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPosTag)((c_, f_) => c_.copy(posTag = Some(f_)))
    def optionalPosTag: com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.posTag)((c_, f_) => c_.copy(posTag = f_))
    def parserTag: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getParserTag)((c_, f_) => c_.copy(parserTag = Some(f_)))
    def optionalParserTag: com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.parserTag)((c_, f_) => c_.copy(parserTag = f_))
    def group: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getGroup)((c_, f_) => c_.copy(group = Some(f_)))
    def optionalGroup: com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.group)((c_, f_) => c_.copy(group = f_))
    def mentions: com.trueaccord.lenses.Lens[UpperPB, scala.collection.Seq[Int]] = field(_.mentions)((c_, f_) => c_.copy(mentions = f_))
  }
  final val TOKEN_FIELD_NUMBER = 1
  final val LEMMA_FIELD_NUMBER = 2
  final val POS_TAG_FIELD_NUMBER = 3
  final val PARSERTAG_FIELD_NUMBER = 4
  final val GROUP_FIELD_NUMBER = 5
  final val MENTIONS_FIELD_NUMBER = 6
}
